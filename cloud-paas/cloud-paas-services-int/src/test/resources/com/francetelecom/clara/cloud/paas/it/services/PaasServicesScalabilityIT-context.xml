<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:amq="http://activemq.apache.org/schema/core"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

	<!-- ======================================================================= -->
	<!-- to switch this test between postgresql and mysql look for @DATABASE tag -->
	<!-- ======================================================================= -->
	
	<bean id="propertyConfigurer" class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/com/francetelecom/clara/cloud/commons/testconfigurations/credentials-${datacenter:reference}.properties</value>
                <!-- @DATABASE : config-hibernate-test-xxx-create-drop.properties; xxx = hsqldb, mysql or postgresql -->
                <value>classpath:/com/francetelecom/clara/cloud/commons/testconfigurations/config-hibernate-test-postgresql-create-drop.properties</value>
			</list>
		</property>
	</bean>

	<import resource="classpath:/com/francetelecom/clara/cloud/commons/jpa/jpa-context.xml"/>
	<import resource="classpath:/com/francetelecom/clara/cloud/commons/testconfigurations/mock-liquibase-context.xml"/>
   
	<!-- @DATABASE datasources-xxx-scalability-context.xml; xxx = mysql or postgresql -->
    <import resource="datasources-postgresql-scalability-context.xml" />

   	<!-- required to configure LogicalModelCatalog -->
	<!-- this bean is used to fetch sample app properties (e.g. ear maven references) from paas-samples.properties -->
	<bean id="sampleAppProperties" class="com.francetelecom.clara.cloud.logicalmodel.samplecatalog.SampleAppProperties"/>
	
    <bean name="springooLogicalModelCatalog" class="com.francetelecom.clara.cloud.logicalmodel.samplecatalog.SpringooLogicalModelCatalog"></bean>

	<!-- pluginStrategy bean is mocked so that activation process is empty       -->
	<!-- when pluginStrategy is mocked, no plugin is eligible for all entities  -->
	
	<bean id="pluginStrategy" class="org.mockito.Mockito" factory-method="mock">
		<constructor-arg value="com.francetelecom.clara.cloud.paas.activation.v1.ActivationPluginStrategy" />
	</bean>

	<import resource="classpath:/META-INF/spring/paas-activation-activiti-context.xml"/>

	<bean id="sessionFactory" factory-bean="entityManagerFactory" factory-method="getSessionFactory"/>	


<!-- FIXME : this is not avail in Hibernate 4.3+, but does not seem to be used -->	
<!-- 	<bean id="hibernateStatistics" class="org.hibernate.jmx.StatisticsService"> -->
<!-- 	   <property name="statisticsEnabled" value="true" /> -->
<!-- 	   <property name="sessionFactory" ref="sessionFactory"/> -->
<!-- 	</bean> -->
	
	<!-- Needed by ManageEnvironment bean -->
	<import resource="classpath:/META-INF/spring/log-service-splunk-context.xml" />

    <import resource="classpath:/META-INF/spring/cloud-services-context.xml" />

    <!--Needed to use projection-->
    <import resource="classpath:/META-INF/spring/paas-projection-context.xml" />
    <import resource="classpath:/META-INF/spring/paas-constraint-context.xml" />
    <import resource="classpath:/META-INF/spring/mvn-consumer-context.xml" />
    <import resource="classpath:/META-INF/spring/cloud-archive-context.xml" />    

	<import resource="mock-taskexecutor-context.xml"/>	
	<!-- import resource="jmx-context.xml"/-->
	<import resource="transaction-context.xml" />
	<!-- note: datasources contexts must be imported in each test context to select between hsql and postgresql  -->

	<import resource="classpath:/META-INF/spring/logical-model-repository-context.xml"/>
	<import resource="classpath:/META-INF/spring/technical-model-repository-context.xml"/>
	<import resource="classpath:/META-INF/spring/core-model-repository-context.xml"/>

	<!-- JMS server -->
	<amq:broker useJmx="true" persistent="false">
	
		<amq:destinationPolicy>
			<amq:policyMap>
				<amq:policyEntries>
					<amq:policyEntry queue="jms/activationRequestQueue">
						<amq:deadLetterStrategy>
							<amq:sharedDeadLetterStrategy>
								<amq:deadLetterQueue>
									<amq:queue physicalName="jms/activationDeadLetterQueue" />
								</amq:deadLetterQueue>
							</amq:sharedDeadLetterStrategy>
						</amq:deadLetterStrategy>
					</amq:policyEntry>
					<amq:policyEntry queue="jms/activationReplyQueue">
						<amq:deadLetterStrategy>
							<amq:sharedDeadLetterStrategy>
								<amq:deadLetterQueue>
									<amq:queue physicalName="jms/activationDeadLetterQueue" />
								</amq:deadLetterQueue>
							</amq:sharedDeadLetterStrategy>
						</amq:deadLetterStrategy>
					</amq:policyEntry>
				</amq:policyEntries>
			</amq:policyMap>
		</amq:destinationPolicy>
		
		<amq:transportConnectors>
			<amq:transportConnector uri="tcp://localhost:0" />
		</amq:transportConnectors>
		
	</amq:broker>

	<!-- JMS queue connection factory : used for unit testing -->
	<amq:pooledConnectionFactory id="asyncTaskHandlingConnectionFactory">
		<amq:connectionFactory>
			<amq:connectionFactory brokerURL="vm://localhost?jms.redeliveryPolicy.maximumRedeliveries=2" />
		</amq:connectionFactory>
	</amq:pooledConnectionFactory>


	<!-- JMS queue definition to handle request message -->
	<amq:queue id="activationRequestQueue" physicalName="jms/activationRequestQueue"/>

	<!-- JMS queue definition to handle reply message -->
	<amq:queue id="activationReplyQueue" physicalName="jms/activationReplyQueue"/>

	<!-- JMS queue definition to handle error message -->
	<amq:queue id="activationErrorQueue" physicalName="jms/activationErrorQueue"/>

	<!-- JMS queue definition to handle error message -->
	<amq:queue id="activationDeadLetterQueue" physicalName="jms/activationDeadLetterQueue"/>

	<!-- Configuration d un gestionnaire local de transactions pour activitiDS -->
	<bean id="activitiTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="activitiDS" />
	</bean>

	<!-- Configuration d un gestionnaire local de transactions pour asyncTaskHandlingConnectionFactory -->
	<bean id="jmsTransactionManager" class="org.springframework.jms.connection.JmsTransactionManager">
		<property name="connectionFactory" ref="asyncTaskHandlingConnectionFactory" />
	</bean>

<!--
    FIXME: remove duplicated content from E:\workspaceProtoClaraV8Intellij\cloud-orange-paas\cloud-paas\cloud-paas-activation\src\test\resources\META-INF\spring\paas-activation-activiti-asynctaskhandling-context.xml
-->

</beans>
