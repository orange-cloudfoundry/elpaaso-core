<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:amq="http://activemq.apache.org/schema/core"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.0.xsd
		http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

	<bean id="transactionManager"
		class="org.springframework.jms.connection.JmsTransactionManager"
		p:connectionFactory-ref="connectionFactory" />

	<amq:pooledConnectionFactory id="connectionFactory">
		<amq:connectionFactory>
			<amq:connectionFactory brokerURL="vm://localhost?jms.redeliveryPolicy.maximumRedeliveries=1" />
		</amq:connectionFactory>
	</amq:pooledConnectionFactory>
	
	<amq:broker useJmx="true" persistent="true" dataDirectory="${broker.storagepath}" deleteAllMessagesOnStartup="true">
	
		<amq:plugins>
			<amq:loggingBrokerPlugin logConnectionEvents="false" logSessionEvents="false" logProducerEvents="true" />
		</amq:plugins>
		
		<amq:destinationPolicy>
			<amq:policyMap>
				<amq:policyEntries>
					<amq:policyEntry queue="myBackend.request.queue">
						<amq:deadLetterStrategy>
							<amq:sharedDeadLetterStrategy>
								<amq:deadLetterQueue>
									<amq:queue physicalName="myBackend.deadmessage.queue" />
								</amq:deadLetterQueue>
							</amq:sharedDeadLetterStrategy>
						</amq:deadLetterStrategy>
					</amq:policyEntry>
					<amq:policyEntry queue="myBackend.reply.queue">
						<amq:deadLetterStrategy>
							<amq:sharedDeadLetterStrategy>
								<amq:deadLetterQueue>
									<amq:queue physicalName="myBackend.deadmessage.queue" />
								</amq:deadLetterQueue>
							</amq:sharedDeadLetterStrategy>
						</amq:deadLetterStrategy>
					</amq:policyEntry>
				</amq:policyEntries>
			</amq:policyMap>
		</amq:destinationPolicy>
		
		<amq:transportConnectors>
			<amq:transportConnector uri="tcp://localhost:0" />
		</amq:transportConnectors>
		
	</amq:broker>

	<!-- JMS queue definition to handle request message -->
	<amq:queue id="myBackendRequestQueue" physicalName="myBackend.request.queue"/>

	<!-- JMS queue definition to handle reply message -->
	<amq:queue id="myBackendReplyQueue" physicalName="myBackend.reply.queue"/>

	<!-- JMS queue definition to handle error message -->
	<amq:queue id="myBackendErrorQueue" physicalName="myBackend.error.queue"/>

	<!-- JMS queue definition to handle dead message -->
	<amq:queue id="myBackendDeadMessageQueue"  physicalName="myBackend.deadmessage.queue"/>

	<!-- SimpleTaskHandler to handle async request/reply with polling pattern 
		for myBackend -->
	<bean id="myBackendSimpleTaskHandler"
		class="com.francetelecom.clara.cloud.paas.activation.v1.async.SimpleTaskHandler">
		<property name="taskHandlerCallback" ref="myBackendTaskHandlerCallback"/>
		<property name="jmsRequestTemplate">
			<bean class="org.springframework.jms.core.JmsTemplate"
				p:defaultDestination-ref="myBackendRequestQueue"
				p:connectionFactory-ref="connectionFactory" />
		</property>
		<property name="jmsReplyTemplate">
			<bean class="org.springframework.jms.core.JmsTemplate"
				p:defaultDestination-ref="myBackendReplyQueue"
				p:connectionFactory-ref="connectionFactory" />
		</property>
		<property name="jmsErrorTemplate">
			<bean class="org.springframework.jms.core.JmsTemplate"
				p:defaultDestination-ref="myBackendErrorQueue"
				p:connectionFactory-ref="connectionFactory" />
		</property>
	</bean>

	<!-- this is the Message Driven POJO (MDP) -->
	<bean id="myBackendRetryableMessageListener"
		class="com.francetelecom.clara.cloud.paas.activation.v1.async.listener.RetryableMessageListener">
		<property name="taskHandler" ref="myBackendSimpleTaskHandler" />
	</bean>

	<!-- this is the Message Driven POJO (MDP) -->
	<bean id="myBackendReplyMessageListener"
		class="com.francetelecom.clara.cloud.paas.activation.v1.async.listener.ReplyMessageListener">
		<property name="taskHandler" ref="myBackendSimpleTaskHandler" />
	</bean>

	<!-- this is the Message Driven POJO (MDP) -->
	<bean id="myBackendErrorMessageListener"
		class="com.francetelecom.clara.cloud.paas.activation.v1.async.listener.ErrorMessageListener">
		<property name="taskHandler" ref="myBackendSimpleTaskHandler" />
	</bean>

	<!-- this is the Message Driven POJO (MDP) -->
	<bean id="myBackendUnexpectedErrorMessageListener"
		class="com.francetelecom.clara.cloud.paas.activation.v1.async.listener.UnexpectedErrorMessageListener">
		<property name="jmsErrorTemplate">
			<bean class="org.springframework.jms.core.JmsTemplate"
				p:defaultDestination-ref="myBackendErrorQueue"
				p:connectionFactory-ref="connectionFactory" />
		</property>
	</bean>

	<jms:listener-container connection-factory="connectionFactory" transaction-manager="transactionManager" concurrency="5">
		<jms:listener destination="myBackend.request.queue" ref="myBackendRetryableMessageListener" />
		<jms:listener destination="myBackend.reply.queue" ref="myBackendReplyMessageListener" />
		<jms:listener destination="myBackend.error.queue" ref="myBackendErrorMessageListener" />
		<jms:listener destination="myBackend.deadmessage.queue" ref="myBackendUnexpectedErrorMessageListener" />
	</jms:listener-container>

	<!-- this is a mock -->
	<bean id="myBackendTaskHandlerCallback" class="org.mockito.Mockito" factory-method="mock">
		<constructor-arg value="com.francetelecom.clara.cloud.paas.activation.v1.async.TaskHandlerCallback" />
	</bean>
	
</beans>
